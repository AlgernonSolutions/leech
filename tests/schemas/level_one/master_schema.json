{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "GraphSchema",
  "description": "A schema defining objects within an algernon graph system",
  "type": "object",
  "properties": {
    "vertex": {
      "description": "a array of vertex entries",
      "type": "array",
      "items": {
        "$ref": "#/definitions/vertex_entry"
      },
      "uniqueItems": true
    },
    "edge": {
      "description": "a array of edge entries",
      "type": "array",
      "items": {
        "$ref": "#/definitions/edge_entry"
      }
    }
  },
  "definitions": {
    "linking_rule": {
      "description": "a set of rules dictating the relationships involving a given object type",
      "type": "object",
      "properties": {
        "vertex_specifiers": {
          "description": "a list of conditional statements that the object must match to have the rules applied",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "outbound": {
          "description": "rules dictating edge creation with the object as the source",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linking_rule_entry"
          }
        },
        "inbound": {
          "description": "rules dictating the edge creation with the object as the target",
          "type": "array",
          "items": {
            "$ref": "#/definitions/linking_rule_entry"
          }
        }
      },
      "required": ["vertex_specifiers", "outbound", "inbound"]
    },
    "linking_rule_entry": {
      "description": "a description of a single linking rule, where the object is the source of the edge",
      "type": "object",
      "properties": {
        "edge_type": {
          "description": "the type of edge generated by the rule",
          "type": "string"
        },
        "target_type": {
          "description": "the object type of the target object",
          "type": "string"
        },
        "target_specifiers": {
          "description": "an array of rules specifying which objects will be linked to the object by this rule",
          "items": {
            "$ref": "#/definitions/target_specifiers"
          }
        },
        "target_constants": {
          "description": "any static matching parameters for the linking rule",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "constant_name": {
                "type": "string"
              },
              "constant_value": {
                "type": "string"
              }
            },
            "required": [
              "constant_name",
              "constant_value"
            ]
          }
        },
        "if_absent": {
          "description": "action to take if a target vertex is called for, but that vertex is not in the graph",
          "enum": [
            "stub",
            "create",
            "pass"
          ]
        }
      },
      "required": [
        "edge_type",
        "target_type",
        "target_specifiers",
        "target_constants",
        "if_absent"
      ]
    },
    "target_specifiers": {
      "anyOf": [
        {
          "$ref": "#/definitions/shared_property_specifier"
        },
        {
          "$ref": "#/definitions/extraction_specifier"
        },
        {
          "$ref": "#/definitions/function_specifier"
        }
      ]
    },
    "shared_property_specifier": {
      "type": "object",
      "properties": {
        "specifier_name": {"type": "string"},
        "specifier_type": {"const": "shared_property"},
        "shared_properties": {
          "type": "array",
          "items": {"type": "string"}
        }
      },
      "required": ["specifier_name", "specifier_type", "shared_properties"]
    },
    "extraction_specifier": {
      "type": "object",
      "properties": {
        "specifier_name": {"type": "string"},
        "specifier_type": {"const": "extraction"},
        "extracted_properties": {
          "type": "array",
          "items": {"type": "string"}
        }
      },
      "required": ["specifier_name", "specifier_type", "extracted_properties"]
    },
    "function_specifier": {
      "type": "object",
      "properties": {
        "specifier_name": {
          "type": "string"
        },
        "specifier_type": {
          "const": "function"
        },
        "function_name": {
          "type": "string"
        },
        "extracted_properties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "specifier_name",
        "specifier_type",
        "extracted_properties",
        "function_name"
      ]
    },
    "property_data_types": {
      "enum": [
        "String",
        "Integer",
        "DateTime"
      ]
    },
    "sorted_set_index": {
      "description": "a range index, which collects objects and orders them by score",
      "type": "object",
      "properties": {
        "score": {
          "description": "the vertex property to be used as the score, will uniquely identify the object in the index",
          "type": "string"
        },
        "key": {
          "description": "an array of vertex properties that will be concatenated together to form the index key space",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "maxProperties": 2,
      "minProperties": 2,
      "required": [
        "score",
        "key"
      ]
    },
    "unique_index": {
      "description": "single uniquely identifying index based on a single key",
      "type": "object",
      "properties": {
        "key": {
          "description": "an array of vertex properties that will be concatenated together to form the index key",
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "uniqueItems": true
        }
      },
      "maxProperties": 1,
      "minProperties": 1,
      "required": [
        "key"
      ]
    },
    "indexes": {
      "description": "the accepted index types",
      "type": "object",
      "properties": {
        "index_name": {
          "type": "string"
        },
        "index_type": {
          "type": "string"
        },
        "index_properties": {
          "oneOf": [
            {
              "$ref": "#/definitions/sorted_set_index"
            },
            {
              "$ref": "#/definitions/unique_index"
            }
          ]
        }
      },
      "maxProperties": 3,
      "minProperties": 3,
      "required": [
        "index_name",
        "index_type",
        "index_properties"
      ]
    },
    "entry_property": {
      "description": "a object property containing a property name and a data type",
      "type": "object",
      "properties": {
        "property_name": {
          "type": "string"
        },
        "property_data_type": {
          "$ref": "#/definitions/property_data_types"
        },
        "sensitive": {
          "enum": [
            true,
            false
          ]
        }
      },
      "maxProperties": 3,
      "minProperties": 2,
      "required": [
        "property_name",
        "property_data_type"
      ],
      "additionalItems": false
    },
    "id_entry_property": {
      "description": "the property which contains the field used as the id_value of the object",
      "type": "object",
      "properties": {
        "property_name":{"type": "string"},
        "property_data_type": {
          "$ref": "#/definitions/property_data_types"
        },
        "is_id_value": {
          "enum": [
            true
          ]
        }
      },
      "maxProperties": 3,
      "minProperties": 3,
      "additionalItems": false
    },
    "edge_entry_property": {
      "description": "a edge property containing the name, data type, and source for the property",
      "type": "object",
      "properties": {
        "property_name": {
          "type": "string"
        },
        "property_data_type": {
          "$ref": "#/definitions/property_data_types"
        },
        "property_source": {
          "$ref": "#/definitions/edge_property_source"
        }
      },
      "maxProperties": 3,
      "minProperties": 3,
      "required": [
        "property_name",
        "property_data_type",
        "property_source"
      ]
    },
    "edge_property_source": {
      "description": "the differing methods of deriving edge properties",
      "oneOf": [
        {
          "$ref": "#/definitions/vertex_held_edge_property"
        },
        {
          "$ref": "#/definitions/extracted_edge_property"
        },
        {
          "$ref": "#/definitions/function_edge_property"
        }
      ]
    },
    "vertex_held_edge_property": {
      "description": "an edge property_source which takes it's value one of it's vertexes",
      "type": "object",
      "properties": {
        "source_type": {
          "enum": [
            "source_vertex",
            "target_vertex"
          ]
        },
        "vertex_property_name": {
          "type": "string"
        }
      },
      "maxProperties": 2,
      "minProperties": 2,
      "required": [
        "source_type",
        "vertex_property_name"
      ]
    },
    "extracted_edge_property": {
      "description": "an edge property_source which takes it's value from a previously executed extraction",
      "type": "object",
      "properties": {
        "source_type": {
          "const": "extraction"
        },
        "extraction_name": {
          "type": "string"
        }
      },
      "maxProperties": 2,
      "minProperties": 2,
      "required": [
        "source_type",
        "extraction_name"
      ]
    },
    "function_edge_property": {
      "description": "an edge property_source which takes it's value from a previously executed extraction, which is then manipulated by a provided function",
      "type": "object",
      "properties": {
        "source_type": {
          "const": "function"
        },
        "function_name": {
          "type": "string"
        }
      },
      "maxProperties": 2,
      "minProperties": 2,
      "required": [
        "source_type",
        "function_name"
      ]
    },
    "internal_id_key": {
      "description": "the fields which will be concatenated together to form the source string for the entry internal_id",
      "type": "array",
      "items": {
        "type": "string"
      },
      "minItems": 1,
      "uniqueItems": true
    },
    "identifier_stem": {
      "description": "a selection of internal_id_key fields which uniquely identify a class of objects",
      "type": "array",
      "items": {
        "type": "string"
      },
      "minItems": 1,
      "uniqueItems": true
    },
    "edge_internal_id_key": {
      "description": "the fields which will be concatenated together to form the source string for the entry internal_id",
      "type": "array",
      "items": [
        {
          "const": "from.internal_id"
        },
        {
          "const": "schema.edge_label"
        },
        {
          "const": "to.internal_id"
        }
      ],
      "additionalItems": {
        "type": "string"
      },
      "minItems": 3,
      "uniqueItems": true
    },
    "vertex_entry": {
      "description": "the vertex object",
      "type": "object",
      "properties": {
        "vertex_name": {
          "type": "string"
        },
        "internal_id_key": {
          "$ref": "#/definitions/internal_id_key"
        },
        "identifier_stem": {
          "$ref": "#/definitions/identifier_stem"
        },
        "vertex_properties": {
          "description": "a array of vertex properties",
          "type": "array",
          "items": [
            {
              "$ref": "#/definitions/id_entry_property"
            }
          ],
          "additionalItems": {"$ref": "#/definitions/entry_property"}
        },
        "indexes": {
          "description": "a array of indexes that constrain the object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/indexes"
          }
        },
        "rules": {
          "description": "collection of automated actions taken after a successful vertex add",
          "type": "object",
          "properties": {
            "linking_rules": {
              "description": "rules that define the relationships between vertexes",
              "type": "array",
              "items": {
                "$ref": "#/definitions/linking_rule"
              }
            }
          }
        },
        "extract": {
          "description": "the collected instructions on how to extract the object from the data source",
          "type": "array",
          "items": {
            "$ref": "#/definitions/extractions"
          }
        }
      },
      "maxProperties": 7,
      "minProperties": 7,
      "required": [
        "vertex_name",
        "internal_id_key",
        "identifier_stem",
        "vertex_properties",
        "indexes",
        "rules",
        "extract"
      ]
    },
    "extractions": {
      "type": "object",
      "anyOf": [
        {
          "$ref": "#/definitions/credible_front"
        },
        {
          "$ref": "#/definitions/credible_ws"
        },
        {
          "$ref": "#/definitions/generic_front"
        }
      ]
    },
    "credible_front": {
      "description": "extraction profile for credible domains without web service access",
      "type": "object",
      "properties": {
        "extraction_source": {
          "const": "CredibleFrontEndExtractor"
        },
        "extraction_properties": {
          "type": "object"
        }
      }
    },
    "generic_front": {
      "description": "allows for generic testing, not for actual use",
      "type": "object",
      "properties": {
        "extraction_source": {
          "const": "GenericExtractor"
        }
      }
    },
    "credible_ws": {
      "description": "extraction profile targeting the credible web service",
      "type": "object",
      "properties": {
        "extraction_source": {
          "const": "CredibleWebServiceExtractor"
        },
        "extraction_properties": {
          "type": "object",
          "properties": {
            "queries": {
              "type": "array",
              "items": [
                {
                  "type": "object",
                  "properties": {
                    "query_name": {
                      "const": "source"
                    }
                  },
                  "required": [
                    "query_name"
                  ]
                }
              ],
              "additionalItems": {
                "$ref": "#/definitions/credible_query"
              }
            }
          }
        }
      }
    },
    "credible_query": {
      "type": "object",
      "properties": {
        "query_name": {"type": "string"}
      }
    },
    "edge_entry": {
      "description": "the edge object",
      "type": "object",
      "properties": {
        "edge_label": {
          "description": "the label assigned to the edge",
          "type": "string"
        },
        "internal_id_key": {
          "$ref": "#/definitions/edge_internal_id_key"
        },
        "from": {
          "description": "the vertex type which the edge is allowed to start from",
          "type": "string"
        },
        "to": {
          "description": "the vertex type which the edge is allowed to terminate at",
          "type": "string"
        },
        "edge_properties": {
          "description": "an array of entry properties assigned to the edge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/edge_entry_property"
          }
        },
        "indexes": {
          "description": "a array of indexes that constrain the object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/indexes"
          }
        }
      },
      "maxProperties": 6,
      "minProperties": 6,
      "required": [
        "edge_label",
        "internal_id_key",
        "from",
        "to",
        "edge_properties",
        "indexes"
      ]
    },
    "cluster_entry": {
      "description": "the cluster object",
      "type": "object",
      "properties": {
        "cluster_name": {
          "description": "the descriptive name of the cluster",
          "type": "string"
        },
        "internal_id_key": {
          "$ref": "#/definitions/internal_id_key"
        },
        "from": {
          "description": "the vertex type which the edge is allowed to start from",
          "type": "string"
        },
        "to": {
          "description": "the vertex type which the edge is allowed to terminate at",
          "type": "string"
        },
        "edge_properties": {
          "description": "an array of entry properties assigned to the edge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/entry_property"
          }
        },
        "index": {
          "description": "a array of indexes that constrain the object",
          "type": "array",
          "items": {
            "$ref": "#/definitions/indexes"
          }
        }
      },
      "maxProperties": 6,
      "minProperties": 6,
      "required": [
        "edge_label",
        "internal_id_key",
        "from",
        "to",
        "edge_properties",
        "index"
      ]
    }
  }
}