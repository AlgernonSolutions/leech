{
  "domain": {
    "domain_name": "TheLeech",
    "description": "it's the leech",
    "record_retention": 5,
    "workflows": [
      {
        "workflow_name": "fungus",
        "workflow_description": "master level workflow for all fungal leech operations",
        "workflow_config": {
          "concurrency": 1,
          "time_outs": {
            "decision": "300"
          }
        }
      },
      {
        "workflow_name": "command_fungi",
        "workflow_description": "orchestrates and runs the entire Credible FE extraction process",
        "workflow_config": {
          "concurrency": 1,
          "labor_task_lists": [
            {
              "list_name": "credible",
              "number_threads": 1,
              "is_vpc": false
            }
          ],
          "time_outs": {
            "decision": "300"
          }
        }
      },
      {
        "workflow_name": "work_remote_id",
        "workflow_description": "workflow for driving vertex growth from a single remote_id",
        "workflow_config": {
          "concurrency": 1,
          "time_outs": {
            "decision": "300"
          }
        }
      },
      {
        "workflow_name": "work_remote_id_change_action",
        "workflow_description": "workflow for extracting and collecting a change action",
        "workflow_config": {
          "concurrency": 5,
          "time_outs": {
            "decision": "300"
          }
        }
      },
      {
        "workflow_name": "work_remote_id_change_type",
        "workflow_description": "workflow for extracting and collecting a change type",
        "workflow_config": {
          "concurrency": 1,
          "time_outs": {
            "decision": "300"
          }
        }
      },
      {
        "workflow_name": "fungal_leech",
        "workflow_description": "the remaining steps needed to bring fungal objects into the data space",
        "workflow_config": {
          "concurrency": 1,
          "time_outs": {
            "decision": "300"
          }
        }
      }
    ],
    "tasks": [
      {
        "task_name": "get_local_max_change_type_value",
        "task_description": "retrieves the current maximum value for a given change_type by emp_id",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "pull_change_types",
        "task_description": "extracts all the currently listed Credible change_types",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "unlink_old_ids",
        "task_description": "breaks the connection between ext_ids and a data source",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "link_new_ids",
        "task_description": "creates connection between ext_ids and a data source",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "put_new_ids",
        "task_description": "adds id objects to the data space",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "get_local_ids",
        "task_description": "queries id values in the data space",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "get_remote_ids",
        "task_description": "retrieves all the remote id values for a given vertex driven process",
        "task_config": {
          "concurrency": 1,
          "task_list": "credible"
        }
      },
      {
        "task_name": "work_remote_id_change_type",
        "task_description": "extract all the remote entries for a given change type for a given emp_id in Credible",
        "task_config": {
          "concurrency": 1,
          "task_list": "credible"
        }
      },
      {
        "task_name": "get_enrichment_for_change_action",
        "task_description": "if by_emp_id or change_details are needed for a given change_type, extract them",
        "task_config": {
          "concurrency": 1,
          "task_list": "credible"
        }
      },
      {
        "task_name": "pull_schema_entry",
        "task_description": "query and build the leech schema for a given object type",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "build_mapping",
        "task_description": "generates the mapping required to translate variously configured domains to a common standard",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "transform",
        "task_description": "changes raw extracted data into potential vertexes based on the schema",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "assimilate",
        "task_description": "checks potential vertexes against the existing data space and arbitrates the linking and generation of new vertexes",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "index",
        "task_description": "uploads generated vertexes and edges into DynamoDB for indexing",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "graph",
        "task_description": "plots the generated vertex and it's edges into the graph database",
        "task_config": {
          "concurrency": 1
        }
      },
      {
        "task_name": "generate_remote_id_change_data",
        "task_description": "collects and formats the extracted data into a standard format recognizable by the Leech",
        "task_config": {
          "concurrency": 1
        }
      }
    ]
  }
}